import numpy as np
from tqdm import tqdm
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.preprocessing import LabelEncoder
from sklearn import metrics
import lightgbm as lgb
from sklearn import tree
from sklearn.linear_model import LogisticRegression
from sklearn.feature_selection import SelectFromModel
import matplotlib.pyplot as plt
import gc
import warnings
warnings.filterwarnings("ignore")


data = pd.read_csv("train.csv")
train, valid = train_test_split(data, test_size=0.1, random_state=1)
del data
del train


dtypes = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float16',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int8',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float16',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float16',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float32',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float32',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }


def reduce_mem_usage(df, verbose=True):
    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']
    start_mem = df.memory_usage(deep=True).sum() / 1024**2
    for col in tqdm(df.columns):
        col_type = df[col].dtypes
        if col_type in numerics:
            c_min = df[col].min()
            c_max = df[col].max()
            if str(col_type)[:3] == 'int':
                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:
                    df[col] = df[col].astype(np.int8)
                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:
                    df[col] = df[col].astype(np.int16)
                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:
                    df[col] = df[col].astype(np.int32)
                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:
                    df[col] = df[col].astype(np.int64)
            else:
                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:
                    df[col] = df[col].astype(np.float16)
                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:
                    df[col] = df[col].astype(np.float32)
                else:
                    df[col] = df[col].astype(np.float64)
    end_mem = df.memory_usage(deep=True).sum() / 1024**2
    if verbose:
        print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) / start_mem))
    return df


valid = reduce_mem_usage(valid, verbose=True)

valid = valid.drop_duplicates()
valid = valid.drop(['AutoSampleOptIn','Census_InternalBatteryNumberOfCharges', 'Census_InternalBatteryType',
                    'Census_IsFlightingInternal', 'Census_IsFlightsDisabled', 'Census_IsWIMBootEnabled',
                    'Census_ProcessorClass', 'Census_ThresholdOptIn', 'DefaultBrowsersIdentifier',
                    'IsBeta', 'ProductName', 'PuaMode', 'UacLuaenable'], axis=1)  # too many NAN values

"""
numerics = ['int8', 'int16', 'int32', 'int64', 'float16', 'float32', 'float64']
numerical_columns = [c for c, v in dtypes.items() if v in numerics]
categorical_columns = [c for c, v in dtypes.items() if v not in numerics]
"""

numericalFeatures = ['Census_InternalPrimaryDiagonalDisplaySizeInInches',
                     'Census_PrimaryDiskTotalCapacity', 'Census_ProcessorCoreCount',
                     'Census_SystemVolumeTotalCapacity', 'Census_TotalPhysicalRAM']

binaryFeatures = ['Census_HasOpticalDiskDrive', 'Census_IsAlwaysOnAlwaysConnectedCapable', 'Census_IsPenCapable',
                 'Census_IsPortableOperatingSystem', 'Census_IsSecureBootEnabled', 'Census_IsTouchEnabled',
                 'Census_IsVirtualDevice', 'Firewall', 'HasTpm', 'IsProtected',
                 'IsSxsPassiveMode', 'SMode', 'Wdft_IsGamer']

categoricalFeatures = valid.drop(binaryFeatures+numericalFeatures, axis=1).columns

valid[categoricalFeatures] = valid[categoricalFeatures].astype('str')

valid[numericalFeatures].fillna(-1)

valid[binaryFeatures] = valid[binaryFeatures].fillna(valid[binaryFeatures].mode())

for feature in categoricalFeatures:
    valid[feature] = valid[feature].apply(lambda x: x.lower())


def rename_Census_ActivationChannel(x):
    #x = x.lower()
    if 'oem' in x:
        return 'oem'
    elif 'volume' in x:
        return 'volume'
    elif 'retail' in x:
        return 'retail'
    else:
        return x


def rename_Census_ChassisTypeName(x):
    #x = x.lower()
    if 'laptop' in x:
        return 'Notebook'
    elif 'other' in x:
        return 'unknown'
    else:
        return x


def rename_Census_MDC2FormFactor_new(x):
    #x = x.lower()
    if 'server' in x:
        return 'server'
    elif 'tablet' in x:
        return 'tablet'
    else:
        return x


def rename_Census_OSEdition(x):
    #x = x.lower()
    if 'core' in x:
        return 'core'
    elif 'pro' in x:
        return 'pro'
    elif 'enterprise' in x:
        return 'enterprise'
    elif 'server' in x:
        return 'server'
    elif 'home' in x:
        return 'home'
    elif 'education' in x:
        return 'education'
    elif 'cloud' in x:
        return 'cloud'
    else:
        return x


def rename_Census_OSSkuName(x):
    #x = x.lower()
    if 'core' in x:
        return 'core'
    elif 'pro' in x:
        return 'pro'
    elif 'enterprise' in x:
        return 'enterprise'
    elif 'server' in x:
        return 'server'
    elif 'home' in x:
        return 'home'
    elif 'education' in x:
        return 'education'
    elif 'cloud' in x:
        return 'cloud'
    else:
        return x


def rename_SmartScreen(x):
    #x = x.lower()
    if 'promt' in x:
        return 'prompt'
    elif 'requireadmin' in x:
        return 'requireadmin'
    elif 'existsnotset' in x:
        return 'existsnotset'
    elif 'off' in x:
        return 'off'
    elif 'warn' in x:
        return 'warn'
    elif 'prompt' in x:
        return 'prompt'
    elif 'block' in x:
        return 'block'
    elif 'on' in x:
        return 'on'
    else:
        return 'unknown'


valid['Census_MDC2FormFactor'] = valid['Census_MDC2FormFactor'].apply(lambda x: rename_Census_MDC2FormFactor_new(x))
valid['Census_ActivationChannel'] = valid['Census_ActivationChannel'].apply(lambda x: rename_Census_ActivationChannel(x))
valid['Census_ChassisTypeName'] = valid['Census_ChassisTypeName'].apply(lambda x: rename_Census_ChassisTypeName(x))
valid['Census_OSEdition'] = valid['Census_OSEdition'].apply(lambda x: rename_Census_OSEdition(x))
valid['Census_OSSkuName'] = valid['Census_OSSkuName'].apply(lambda x: rename_Census_OSSkuName(x))
valid['SmartScreen'] = valid['SmartScreen'].apply(lambda x: rename_SmartScreen(x))


encoder = LabelEncoder()
encoded = valid[categoricalFeatures].apply(encoder.fit_transform)
valid = valid[numericalFeatures+binaryFeatures].join(encoded)



















